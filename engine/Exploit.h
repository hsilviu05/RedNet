#ifndef EXPLOIT_H
#define EXPLOIT_H

#include <string>
#include <vector>
#include "Node.h"

enum class ExploitType {
    BUFFER_OVERFLOW,
    SQL_INJECTION,
    XSS,
    CSRF,
    PRIVILEGE_ESCALATION,
    DENIAL_OF_SERVICE,
    MAN_IN_THE_MIDDLE,
    ZERO_DAY
};

enum class ExploitComplexity {
    LOW,
    MEDIUM,
    HIGH,
    CRITICAL
};

struct ExploitExecutionRecord {
    std::string target;
    bool success;
    std::string details;
    std::vector<std::string> parameters;
};

struct ExploitResult {
    int accessLevel;
    bool success;
    std::string errorMessage;
    // Add more fields as needed
};

class Exploit {
private:
    int id;
    std::string name;
    std::string description;
    ExploitType type;
    float successRate;
    ExploitComplexity complexity;
    bool isActive;
    std::vector<ExploitExecutionRecord> executionHistory;

public:
    Exploit();
    Exploit(int exploitId, const std::string& name, const std::string& description, 
            ExploitType type, float successRate, ExploitComplexity complexity);
    ~Exploit();

    int getId() const;
    const std::string& getName() const;
    const std::string& getDescription() const;
    ExploitType getType() const;
    float getSuccessRate() const;
    ExploitComplexity getComplexity() const;
    bool isExploitActive() const;

    void activate();
    void deactivate();
    bool execute(const std::string& target, const std::vector<std::string>& parameters = {});
    
    const std::vector<ExploitExecutionRecord>& getExecutionHistory() const;
    std::string getTypeName() const;
    std::string getComplexityName() const;
    void setSuccessRate(float rate);
    void addExecutionRecord(const std::string& target, bool success, 
                           const std::string& details, const std::vector<std::string>& params = {});
    std::string toJson() const;
};

class ExploitManager {
private:
    std::vector<Exploit> exploits;
    void loadDefaultExploits();

public:
    ExploitManager();
    ~ExploitManager();

    void addExploit(const Exploit& exploit);
    void removeExploit(int id);
    Exploit* getExploit(int id);
    const std::vector<Exploit>& getAllExploits() const;
    std::vector<Exploit> getExploitsByType(ExploitType type);
    std::vector<Exploit> getExploitsByComplexity(ExploitComplexity complexity);
    
    void saveToFile(const std::string& filename);
    void loadFromFile(const std::string& filename);
};

class ExploitDatabase {
public:
    std::vector<Exploit*> getExploitsForNode(const Node& node) { return {}; }
};

#endif // EXPLOIT_H 