#ifndef EXPLOIT_H
#define EXPLOIT_H

#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <deque>
#include <list>
#include <random>
#include <chrono>
#include "Node.h"

enum ExploitType {
    BRUTE_FORCE,
    BUFFER_OVERFLOW,
    SERVICE_EXPLOIT,
    PRIVILEGE_ESCALATION,
    SOCIAL_ENGINEERING,
    SQL_INJECTION,
    XSS_EXPLOIT,
    CSRF_EXPLOIT,
    PATH_TRAVERSAL,
    COMMAND_INJECTION,
    UNKNOWN_EXPLOIT
};

enum AccessLevel {
    NO_ACCESS,
    USER_ACCESS,
    ADMIN_ACCESS,
    ROOT_ACCESS
};

struct ExploitResult {
    bool success;
    AccessLevel accessLevel;
    std::string message;
    std::vector<std::string> filesAccessed;
    std::vector<std::string> usersCompromised;
    int timeTaken; // milliseconds
    std::string errorMessage;
    
    ExploitResult() : success(false), accessLevel(NO_ACCESS), timeTaken(0) {}
};

// Forward declaration
class Node;

// Base Exploit class
class Exploit {
protected:
    std::string name;
    std::string description;
    ExploitType type;
    int difficulty; // 1-10 scale
    double successProbability;
    std::string targetService;
    int targetPort;
    std::vector<std::string> requiredTools;
    
public:
    Exploit(std::string name, std::string description, ExploitType type, int difficulty, double successProb);
    virtual ~Exploit() = default;
    
    // Virtual methods that must be implemented by derived classes
    virtual bool canExploit(Node& target) = 0;
    virtual ExploitResult execute(Node& target) = 0;
    
    // Getters
    std::string getName() const { return name; }
    std::string getDescription() const { return description; }
    ExploitType getType() const { return type; }
    int getDifficulty() const { return difficulty; }
    double getSuccessProbability() const { return successProbability; }
    std::string getTargetService() const { return targetService; }
    int getTargetPort() const { return targetPort; }
    
    // Utility methods
    bool requiresService(std::string service) const;
    bool requiresPort(int port) const;
    void addRequiredTool(std::string tool);
};

// Brute Force Exploit
class BruteForceExploit : public Exploit {
private:
    std::vector<std::string> passwordList;
    std::vector<std::string> usernameList;
    int maxAttempts;
    
public:
    BruteForceExploit();
    ~BruteForceExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addPassword(std::string password);
    void addUsername(std::string username);
    void setMaxAttempts(int attempts);
};

// Service Exploit
class ServiceExploit : public Exploit {
private:
    std::string vulnerabilityType;
    std::map<std::string, double> serviceVulnerabilities;
    
public:
    ServiceExploit(std::string service, std::string vulnType);
    ~ServiceExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addServiceVulnerability(std::string service, double probability);
};

// Buffer Overflow Exploit
class BufferOverflowExploit : public Exploit {
private:
    std::string payload;
    int bufferSize;
    
public:
    BufferOverflowExploit();
    ~BufferOverflowExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void setPayload(std::string payload);
    void setBufferSize(int size);
};

// Privilege Escalation Exploit
class PrivilegeEscalationExploit : public Exploit {
private:
    std::vector<std::string> escalationMethods;
    
public:
    PrivilegeEscalationExploit();
    ~PrivilegeEscalationExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addEscalationMethod(std::string method);
};

// SQL Injection Exploit
class SQLInjectionExploit : public Exploit {
private:
    std::vector<std::string> payloads;
    std::string targetParameter;
    std::string databaseType;
    
public:
    SQLInjectionExploit();
    ~SQLInjectionExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addPayload(std::string payload);
    void setTargetParameter(std::string param);
    void setDatabaseType(std::string dbType);
};

// Cross-Site Scripting (XSS) Exploit
class XSSExploit : public Exploit {
private:
    std::vector<std::string> xssPayloads;
    std::string targetParameter;
    std::string attackType; // reflected, stored, dom
    
public:
    XSSExploit();
    ~XSSExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addXSSPayload(std::string payload);
    void setTargetParameter(std::string param);
    void setAttackType(std::string type);
};

// Cross-Site Request Forgery (CSRF) Exploit
class CSRFExploit : public Exploit {
private:
    std::string targetAction;
    std::string csrfToken;
    std::string attackMethod; // GET, POST
    
public:
    CSRFExploit();
    ~CSRFExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void setTargetAction(std::string action);
    void setCSRFToken(std::string token);
    void setAttackMethod(std::string method);
};

// Path Traversal Exploit
class PathTraversalExploit : public Exploit {
private:
    std::vector<std::string> traversalPayloads;
    std::string targetFile;
    
public:
    PathTraversalExploit();
    ~PathTraversalExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addTraversalPayload(std::string payload);
    void setTargetFile(std::string file);
};

// Command Injection Exploit
class CommandInjectionExploit : public Exploit {
private:
    std::vector<std::string> injectionPayloads;
    std::string targetCommand;
    std::string injectionPoint;
    
public:
    CommandInjectionExploit();
    ~CommandInjectionExploit() = default;
    
    bool canExploit(Node& target) override;
    ExploitResult execute(Node& target) override;
    
    void addInjectionPayload(std::string payload);
    void setTargetCommand(std::string command);
    void setInjectionPoint(std::string point);
};

// Exploit Chain for chaining multiple exploits
class ExploitChain {
private:
    std::vector<Exploit*> exploits;
    std::string name;
    double chainSuccessProbability;
    
public:
    ExploitChain(std::string name);
    ~ExploitChain();
    
    void addExploit(Exploit* exploit);
    ExploitResult executeChain(Node& target);
    double getChainSuccessProbability() const;
    std::string getName() const { return name; }
    int getExploitCount() const { return exploits.size(); }
};

// Exploit Database to manage all exploits
class ExploitDatabase {
private:
    std::vector<Exploit*> exploits;
    std::map<ExploitType, std::vector<Exploit*>> exploitsByType;
    std::map<std::string, std::vector<Exploit*>> exploitsByService;
    
public:
    ExploitDatabase();
    ~ExploitDatabase();
    
    void addExploit(Exploit* exploit);
    std::vector<Exploit*> getExploitsForNode(Node& target);
    std::vector<Exploit*> getExploitsForService(std::string service);
    std::vector<Exploit*> getExploitsByType(ExploitType type);
    std::vector<Exploit*> getAllExploits() const;
    void loadDefaultExploits();
    void clearExploits();
    
    // Utility methods
    Exploit* findExploitByName(std::string name);
    int getExploitCount() const { return exploits.size(); }
};

#endif // EXPLOIT_H

